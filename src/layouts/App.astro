---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'
import AppStoreIcon from '@/components/icons/AppStoreIcon'
import GooglePlayIcon from '@/components/icons/GooglePlayIcon'

type Props = {
	id: CollectionEntry<'app'>['id']
	data: CollectionEntry<'app'>['data']
	headings: MarkdownHeading[]
	readTime: string
}

const { data } = Astro.props
const { name, description, pubDate, heroImage, icon } = data

const articleDate = pubDate.toISOString()
---

<BaseLayout title={name} description={description} image={heroImage?.src} articleDate={articleDate}>
	<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none'>
		<header class='mb-3 flex flex-col justify-center items-center gap-6'>
			<div class='flex flex-col gap-1'>
				<>
					{
						icon && (
							<Image
								src={icon}
								width={200}
								height={200}
								quality={100}
								format='jpg'
								loading='eager'
								class='rounded-xl w-[200px] max-h-[200px]  object-cover mx-auto mb-2'
								alt={`img of ${name}`}
							/>
						)
					}
				</>

				<div class='flex items-center justify-center gap-x-1 mb-6'>
					<p class='text-center text-sm text-opacity-50'>
						Available since <FormattedDate date={pubDate} />
					</p>
				</div>

				<div class='mb-6 flex items-center justify-center gap-x-4 w-[380px] mx-auto'>
					<a
						href='https://apps.apple.com/de/app/astrobrain-space-program/id6737922303?l=en-GB'
						target='_blank'
						rel='noopener'
					>
						<AppStoreIcon />
					</a>
					<a
						class='w-[330px]'
						href='https://apps.apple.com/de/app/astrobrain-space-program/id6737922303?l=en-GB'
						target='_blank'
						rel='noopener'
					>
						<GooglePlayIcon />
					</a>
				</div>

				<h1 class='text-center text-5xl md:pb-2.5 font-semibold'>
					{name}
				</h1>
			</div>
		</header>

		<div>
			<slot />
		</div>
	</article>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
